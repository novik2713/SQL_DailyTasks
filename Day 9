UPDATE CAB_SQL
SET ip_id=REPLACE(ip_id,'"','') WHERE ip_id LIKE '%"';

UPDATE CAB_SQL
SET download_date=REPLACE(download_date,'"','') WHERE download_date LIKE '"%';

-- 9.1 Give the package name and how many times they're downloaded. Order by the 2nd column descending.
SELECT package, COUNT(*) AS downloaded
FROM CAB_SQL
GROUP BY package
ORDER BY downloaded DESC
-- 9.2 Give the package ranking (based on how many times it was downloaded) during 9AM to 11AM
SELECT package, COUNT(*) AS downloaded
FROM CAB_SQL
WHERE time BETWEEN '09:00:00' AND '11:00:00'
GROUP BY package
ORDER BY downloaded DESC
-- 9.3 How many records (downloads) are from China ("CN") or Japan("JP") or Singapore ("SG")?
SELECT country, COUNT(*) AS downloaded
FROM CAB_SQL
WHERE country IN ("CN", "JP","SG") 
--AND time BETWEEN '09:00:00' AND '11:00:00'
GROUP BY country
ORDER BY downloaded DESC
-- 9.4 Print the countries whose downloads are more than the downloads from China ("CN")

--option with having
SELECT country, COUNT(*) AS downloaded
FROM CAB_SQL
WHERE country IN (
      SELECT country
      FROM CAB_SQL
      GROUP BY country
      HAVING COUNT(*) >=  (
         SELECT COUNT(*)
         FROM CAB_SQL
         WHERE country = 'CN')
)
GROUP BY country
ORDER BY downloaded DESC;

-- 9.5 Print the average length of the package name of all the UNIQUE packages
SELECT AVG(LENGTH(package)) AS average_length
FROM (SELECT DISTINCT package 
	FROM CAB_SQL);
-- 9.6 Get the package whose download count ranks 2nd (print package name and its download count).
SELECT package
	, COUNT(*) AS downloaded
	, RANK() OVER(ORDER BY downloaded) AS package_rank
FROM CAB_SQL
GROUP BY package
ORDER BY downloaded DESC


WITH PackageDownloads AS (
    SELECT package, COUNT(*) AS downloaded
    FROM CAB_SQL
    GROUP BY package
)
SELECT package, downloaded, package_rank
FROM (
    SELECT package, downloaded, RANK() OVER (ORDER BY downloaded DESC) AS package_rank
    FROM PackageDownloads
) AS ranked_packages
WHERE package_rank = 2;

-- 9.7 Print the name of the package whose download count is bigger than 1000.
SELECT package, COUNT(*) AS downloaded
FROM CAB_SQL
GROUP BY package
HAVING downloaded > 1000

-- 9.8 The field "r_os" is the operating system of the users.
    -- 	Here we would like to know what main system we have (ignore version number), the relevant counts, and the proportion (in percentage).


UPDATE CAB_SQL
SET r_os = 'darwin' WHERE r_os LIKE 'darwin%';

UPDATE CAB_SQL
SET r_os = 'linux' WHERE r_os LIKE 'linux%';

SELECT r_os
	, COUNT(*) AS Total_group
	, (SELECT COUNT(*) FROM CAB_SQL) AS TOTAL_COUNT
	--, (Total_group*100/TOTAL_COUNT) AS Procent
	, ROUND((COUNT(*)*100/(SELECT COUNT(*) FROM CAB_SQL)),2) AS 'percentage'
FROM CAB_SQL
GROUP BY r_os
